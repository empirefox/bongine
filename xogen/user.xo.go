// Package xogen contains the types for schema 'public'.
package xogen

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// User represents a row from 'public.user'.
type User struct {
	ID           int      `json:"id"`            // id
	User1ID      int      `json:"user1_id"`      // user1_id
	Name         []string `json:"name"`          // name
	RefreshToken []byte   `json:"refresh_token"` // refresh_token

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (s_ref0 *User) Exists() bool {
	if level0_a {
	} else if level0_b {
	} else {
		for _, s_ref1 := range s_ref0.Name {
			if level1_a {
			} else if level1_b {
			} else {
				for _, s_ref2 := range s_ref1 {
					if level2_a {
					}
				}
			}
		}
	}
	return s_ref0._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.user (` +
		`user1_id, name, refresh_token` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, u.User1ID, u.Name, u.RefreshToken)
	err = db.QueryRow(sqlstr, u.User1ID, u.Name, u.RefreshToken).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.user SET (` +
		`user1_id, name, refresh_token` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, u.User1ID, u.Name, u.RefreshToken, u.ID)
	_, err = db.Exec(sqlstr, u.User1ID, u.Name, u.RefreshToken, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for User.
//
// NOTE: PostgreSQL 9.5+ only
func (u *User) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user (` +
		`id, user1_id, name, refresh_token` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, user1_id, name, refresh_token` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.user1_id, EXCLUDED.name, EXCLUDED.refresh_token` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.User1ID, u.Name, u.RefreshToken)
	_, err = db.Exec(sqlstr, u.ID, u.User1ID, u.Name, u.RefreshToken)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.user WHERE id = $1`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// User returns the User associated with the User's User1ID (user1_id).
//
// Generated from foreign key 'user_user1_fk'.
func (u *User) User(db XODB) (*User, error) {
	return UserByID(db, u.User1ID)
}

// UserByID retrieves a row from 'public.user' as a User.
//
// Generated from index 'user_pk'.
func UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user1_id, name, refresh_token ` +
		`FROM public.user ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.User1ID, &u.Name, &u.RefreshToken)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
